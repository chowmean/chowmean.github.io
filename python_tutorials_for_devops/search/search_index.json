{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Python Training for devops","title":"Home"},{"location":"#welcome-to-python-training-for-devops","text":"","title":"Welcome to Python Training for devops"},{"location":"about/","text":"About","title":"About"},{"location":"oops/","text":"Concept of Object Oriented Programming Objects Everything in python are objects. Even if you initialize a variable with 1. 1 is a object of type int. Classes Classes are combination of variables and functions. Classes define a type of any object. An example of class in below class employee(): __phone_number=\"\" def __init__(name, age): self.name = name self.age = age def get_age(): return self.age def set_age(value): self.age = value def get_name(): return self.name def set_phone(value): self.__phone_number = value This is an example of class, Here we have private variable phone_number, which cannot be ediited by anyone else but functions inside the class. __init () is a constructor which is used to initialize the class. Inheritance The capability of a class to derive properties and characteristics from another class is called Inheritance. Inheritance is one of the most important feature of Object Oriented Programming. Sub Class: The class that inherits properties from another class is called Sub class or Derived Class. Super Class: The class whose properties are inherited by sub class is called Base Class or Super class. class Employee(): __phone_number=\"0000000000\" def __init__(self, name, age): self.name = name self.age = age def get_age(self): return self.age def set_age(self,value): self.age = value def get_name(self): return self.name def set_phone(self,value): self.__phone_number = value def get_phone(self): return self.__phone_number def set_phone(self, value): self.__phone_number = value class VIP(Employee): def get_phone(self): return \"************\" def get_vip_access(self): return \"access_granted\" if __name__ == '__main__': #Simple Employee emp = Employee(\"gaurav\", 12) print(emp.get_phone()) emp.set_phone(\"89628363**\") print(emp.get_phone()) #Vip employee inherting employee properties vip = VIP(\"Venky\", 54) #Overriden method hides phone number print(vip.get_phone()) #Extra added function. print(vip.get_vip_access()) #This function calls the inherited method. print(vip.get_name()) Polyymorphism Encapsulation Structure","title":"Object Oriented Programming"},{"location":"oops/#concept-of-object-oriented-programming","text":"","title":"Concept of Object Oriented Programming"},{"location":"oops/#objects","text":"Everything in python are objects. Even if you initialize a variable with 1. 1 is a object of type int.","title":"Objects"},{"location":"oops/#classes","text":"Classes are combination of variables and functions. Classes define a type of any object. An example of class in below class employee(): __phone_number=\"\" def __init__(name, age): self.name = name self.age = age def get_age(): return self.age def set_age(value): self.age = value def get_name(): return self.name def set_phone(value): self.__phone_number = value This is an example of class, Here we have private variable phone_number, which cannot be ediited by anyone else but functions inside the class. __init () is a constructor which is used to initialize the class.","title":"Classes"},{"location":"oops/#inheritance","text":"The capability of a class to derive properties and characteristics from another class is called Inheritance. Inheritance is one of the most important feature of Object Oriented Programming. Sub Class: The class that inherits properties from another class is called Sub class or Derived Class. Super Class: The class whose properties are inherited by sub class is called Base Class or Super class. class Employee(): __phone_number=\"0000000000\" def __init__(self, name, age): self.name = name self.age = age def get_age(self): return self.age def set_age(self,value): self.age = value def get_name(self): return self.name def set_phone(self,value): self.__phone_number = value def get_phone(self): return self.__phone_number def set_phone(self, value): self.__phone_number = value class VIP(Employee): def get_phone(self): return \"************\" def get_vip_access(self): return \"access_granted\" if __name__ == '__main__': #Simple Employee emp = Employee(\"gaurav\", 12) print(emp.get_phone()) emp.set_phone(\"89628363**\") print(emp.get_phone()) #Vip employee inherting employee properties vip = VIP(\"Venky\", 54) #Overriden method hides phone number print(vip.get_phone()) #Extra added function. print(vip.get_vip_access()) #This function calls the inherited method. print(vip.get_name())","title":"Inheritance"},{"location":"oops/#polyymorphism","text":"","title":"Polyymorphism"},{"location":"oops/#encapsulation","text":"","title":"Encapsulation"},{"location":"oops/#structure","text":"","title":"Structure"},{"location":"syntax/","text":"About python Blocks in python While in most of the langauges blocks are defined using brackets like {}, (), [] but in python blocks are defined using spaces that is the piece of code that has the same spaces from the start of line belong to that contiguous block. Example: for(int i=0;i < =20;i++){ //block start console.log(i) } //block end This is javascript example of printing number from one to 20 i=0 while i < =20: #block start print(i) #block end This is python style of the same. Why are Blocks important? Blocks are important because variables scoping depends a lot on them. Variable defined inside a block will only be accessible from inside the block only. Variables Python Variable Name Rules Must begin with a letter (a - z, A - B) or underscore (_) Other characters can be letters, numbers or _ Case Sensitive Can be any (reasonable) length There are some reserved words which you cannot use as a variable name because Python uses them for other things. Good Variable Name Choose meaningful name instead of short name. roll_no is better than rn. Maintain the length of a variable name. Roll_no_of_a-student is too long? Be consistent; roll_no or RollNo Begin a variable name with an underscore(_) character for a special case. Since python in not static typed language you do not need to define the type of variables.","title":"Python Syntax"},{"location":"syntax/#about-python","text":"","title":"About python"},{"location":"syntax/#blocks-in-python","text":"While in most of the langauges blocks are defined using brackets like {}, (), [] but in python blocks are defined using spaces that is the piece of code that has the same spaces from the start of line belong to that contiguous block. Example: for(int i=0;i < =20;i++){ //block start console.log(i) } //block end This is javascript example of printing number from one to 20 i=0 while i < =20: #block start print(i) #block end This is python style of the same.","title":"Blocks in python"},{"location":"syntax/#why-are-blocks-important","text":"Blocks are important because variables scoping depends a lot on them. Variable defined inside a block will only be accessible from inside the block only.","title":"Why are Blocks important?"},{"location":"syntax/#variables","text":"","title":"Variables"},{"location":"syntax/#python-variable-name-rules","text":"Must begin with a letter (a - z, A - B) or underscore (_) Other characters can be letters, numbers or _ Case Sensitive Can be any (reasonable) length There are some reserved words which you cannot use as a variable name because Python uses them for other things.","title":"Python Variable Name Rules"},{"location":"syntax/#good-variable-name","text":"Choose meaningful name instead of short name. roll_no is better than rn. Maintain the length of a variable name. Roll_no_of_a-student is too long? Be consistent; roll_no or RollNo Begin a variable name with an underscore(_) character for a special case. Since python in not static typed language you do not need to define the type of variables.","title":"Good Variable Name"},{"location":"tooling/","text":"To begin with python tooling, lets first see what these tools are used for. Starting a project To start any project it is always recommended to create the project in its own environment. This means that anything that is installed for python at global level will not affect this env anf vice versa. How to start development? VirutalENV: Install virtualenv sudo apt-get install virtualenv After installation activate it. virtualenv env_name -m python3 This will create an env for python 3 and you can start working inside it. Keep in mind that you have to activate the env before running your code to make it work. Activate env: sourve env_name/bin/activate Now you can install any packages that you want to use in your python program. Deactivate env: deactivate Pep8 formatting. Pep8 is the formatting style that defines how you should format your python program. How you should name your variables and more such conventions. Pep8 is highly recommende for anyone who want to work with opensource community. Dependency Management For dependency management in python we use pip. It is used for installing packages. You can have a file naming requirements.txt which will have all the packages that you need to install along with the version that you want to install. How to install python package: pip install package_name How to install using requirements.txt pip install -r requirements.txt Editor? Pycharm is very good for python but if you are power user of sublime that will be awesome.","title":"Basic Tooling for Python"},{"location":"tooling/#starting-a-project","text":"To start any project it is always recommended to create the project in its own environment. This means that anything that is installed for python at global level will not affect this env anf vice versa.","title":"Starting a project"},{"location":"tooling/#how-to-start-development","text":"","title":"How to start development?"},{"location":"tooling/#virutalenv","text":"Install virtualenv sudo apt-get install virtualenv After installation activate it. virtualenv env_name -m python3 This will create an env for python 3 and you can start working inside it. Keep in mind that you have to activate the env before running your code to make it work. Activate env: sourve env_name/bin/activate Now you can install any packages that you want to use in your python program. Deactivate env: deactivate","title":"VirutalENV:"},{"location":"tooling/#pep8-formatting","text":"Pep8 is the formatting style that defines how you should format your python program. How you should name your variables and more such conventions. Pep8 is highly recommende for anyone who want to work with opensource community.","title":"Pep8 formatting."},{"location":"tooling/#dependency-management","text":"For dependency management in python we use pip. It is used for installing packages. You can have a file naming requirements.txt which will have all the packages that you need to install along with the version that you want to install.","title":"Dependency Management"},{"location":"tooling/#how-to-install-python-package","text":"pip install package_name","title":"How to install python package:"},{"location":"tooling/#how-to-install-using-requirementstxt","text":"pip install -r requirements.txt","title":"How to install using requirements.txt"},{"location":"tooling/#editor","text":"Pycharm is very good for python but if you are power user of sublime that will be awesome.","title":"Editor?"}]}